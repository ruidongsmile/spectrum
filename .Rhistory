gauss_red <- matlib::gaussianElimination(t(D_q_plus_1_L), diag(rep(1, ncol(D_q_plus_1_L))))
R_q_plus_1_L <- t(gauss_red[, 1:nrow(D_q_plus_1_L)])
Y_mat <- t(gauss_red[, (nrow(D_q_plus_1_L) + 1):ncol(gauss_red)])
zero_idx <- which(colSums(abs(R_q_plus_1_L) > 1e-10) == 0)
if (identical(zero_idx, integer(0))){
lap <- lap_q_down_K
} else{
Z_mat <- Y_mat[, zero_idx]
bd_opr_q_plus_1_L_K <- (bd_opr_q_plus_1_L %*% Y_mat)[1:n_q_K, zero_idx]
lap_q_up_K_L <- bd_opr_q_plus_1_L_K %*% inv((t(Z_mat) %*% diag(1 / W_q_plus_1_L) %*% Z_mat)) %*% t(bd_opr_q_plus_1_L_K) %*% diag(1 / W_q_K)
lap <- lap_q_up_K_L + lap_q_down_K
}
}
lap_q_down_K
n_q_L == n_q_K
D_q_plus_1_L <- bd_opr_q_plus_1_L[seq(from=n_q_K + 1, to =n_q_L), ]
n_q_K
n_q_L
bd_opr_q_plus_1_L
simpx_2
sp_cmplx
order
sapply(sp_cmplx, length)
sapply(sp_cmplx, length) == order + 1
simpx_2 <- sp_cmplx[sapply(sp_cmplx, length) == order + 1]
simpx_2 <- sp_cmplx[sapply(sp_cmplx, length) == order + 1]
simpx_2
order <- 3
simpx_1 <- sp_cmplx[sapply(sp_cmplx, length) == order]
simpx_1
rep(0, length(simpx_1))
load_all()
order <- 2
# order is the order of simplices
bd_opr_q_K <- cmplx_K |>
boundary_opr(order = order)
bd_opr_q_plus_1_L <- cmplx_L |>
boundary_opr(order = order + 1)
n_q_L <- length(cmplx_L[sapply(cmplx_L, length) == order + 1])
n_q_K <- length(cmplx_K[sapply(cmplx_K, length) == order + 1])
n_q_minus_1_K <- length(cmplx_K[sapply(cmplx_K, length) == order])
n_q_plus_1_L <- length(cmplx_L[sapply(cmplx_L, length) == order + 2])
n_q_plus_1_L
if(is.null(W_q_minus_1_K)){
W_q_minus_1_K <- rep(1, n_q_minus_1_K)
}
W_q_minus_1_K_mat <- diag(W_q_minus_1_K)
if(is.null(W_q_K)){
W_q_K <- rep(1, n_q_K)
}
W_q_K_mat <- diag(W_q_K)
if(is.null(W_q_plus_1_L)){
W_q_plus_1_L <- rep(1, n_q_plus_1_L)
}
W_q_plus_1_L_mat <- diag(W_q_plus_1_L)
if(order == 0){
lap_q_down_K <- 0
} else{
lap_q_down_K <- W_q_K_mat %*% t(bd_opr_q_K) %*% diag(1 / W_q_minus_1_K) %*% bd_opr_q_K
}
lap_q_down_K
if(n_q_L == n_q_K){
lap_q_up_L <- bd_opr_q_plus_1_L %*% W_q_plus_1_L_mat %*% t(bd_opr_q_plus_1_L) %*% diag(1 / W_q_K)
lap <- lap_q_down_K + lap_q_up_L
# return(lap_q_down_K + lap_q_up_L)
} else{
D_q_plus_1_L <- bd_opr_q_plus_1_L[seq(from=n_q_K + 1, to =n_q_L), ]
gauss_red <- matlib::gaussianElimination(t(D_q_plus_1_L), diag(rep(1, ncol(D_q_plus_1_L))))
R_q_plus_1_L <- t(gauss_red[, 1:nrow(D_q_plus_1_L)])
Y_mat <- t(gauss_red[, (nrow(D_q_plus_1_L) + 1):ncol(gauss_red)])
zero_idx <- which(colSums(abs(R_q_plus_1_L) > 1e-10) == 0)
if (identical(zero_idx, integer(0))){
lap <- lap_q_down_K
} else{
Z_mat <- Y_mat[, zero_idx]
bd_opr_q_plus_1_L_K <- (bd_opr_q_plus_1_L %*% Y_mat)[1:n_q_K, zero_idx]
lap_q_up_K_L <- bd_opr_q_plus_1_L_K %*% inv((t(Z_mat) %*% diag(1 / W_q_plus_1_L) %*% Z_mat)) %*% t(bd_opr_q_plus_1_L_K) %*% diag(1 / W_q_K)
lap <- lap_q_up_K_L + lap_q_down_K
}
}
n_q_L == n_q_K
D_q_plus_1_L <- bd_opr_q_plus_1_L[seq(from=n_q_K + 1, to =n_q_L), ]
D_q_plus_1_L
bd_opr_q_plus_1_L
bd_opr_q_plus_1_L[seq(from=n_q_K + 1, to =n_q_L), ]
bd_opr_q_plus_1_L[seq(from=n_q_K + 1, to =n_q_L), 1]
bd_opr_q_plus_1_L
matrix(bd_opr_q_plus_1_L[seq(from=n_q_K + 1, to =n_q_L), ])
as.matrix(bd_opr_q_plus_1_L[seq(from=n_q_K + 1, to =n_q_L), ])
?as.matrix
D_q_plus_1_L <- as.matrix(bd_opr_q_plus_1_L[seq(from=n_q_K + 1, to =n_q_L), ])
D_q_plus_1_L
gauss_red <- matlib::gaussianElimination(t(D_q_plus_1_L), diag(rep(1, ncol(D_q_plus_1_L))))
gauss_red
R_q_plus_1_L <- t(gauss_red[, 1:nrow(D_q_plus_1_L)])
Y_mat <- t(gauss_red[, (nrow(D_q_plus_1_L) + 1):ncol(gauss_red)])
zero_idx <- which(colSums(abs(R_q_plus_1_L) > 1e-10) == 0)
if (identical(zero_idx, integer(0))){
lap <- lap_q_down_K
} else{
Z_mat <- Y_mat[, zero_idx]
bd_opr_q_plus_1_L_K <- (bd_opr_q_plus_1_L %*% Y_mat)[1:n_q_K, zero_idx]
lap_q_up_K_L <- bd_opr_q_plus_1_L_K %*% inv((t(Z_mat) %*% diag(1 / W_q_plus_1_L) %*% Z_mat)) %*% t(bd_opr_q_plus_1_L_K) %*% diag(1 / W_q_K)
lap <- lap_q_up_K_L + lap_q_down_K
}
zero_idx
identical(zero_idx, integer(0))
zero_idx
Y_mat
Y_mat
gauss_red
bd_opr_q_plus_1_L
bd_opr_q_K
bd_opr_q_plus_1_L
all(bd_opr_q_plus_1_L == 0)
bd_opr_q_plus_1_L
n_q_L == n_q_K
bd_opr_q_plus_1_L
lap_q_up_L
n_q_L == n_q_K
D_q_plus_1_L <- as.matrix(bd_opr_q_plus_1_L[seq(from=n_q_K + 1, to =n_q_L), ])
D_q_plus_1_L
gauss_red <- matlib::gaussianElimination(t(D_q_plus_1_L), diag(rep(1, ncol(D_q_plus_1_L))))
gauss_red
R_q_plus_1_L
Y_mat
zero_idx
D_q_plus_1_L
zero_idx
Y_mat
R_q_plus_1_L
D_q_plus_1_L
bd_opr_q_plus_1_L
D_q_plus_1_L
gauss_red
R_q_plus_1_L
gauss_red[, 1:nrow(D_q_plus_1_L)]
as.matrix(gauss_red[, 1:nrow(D_q_plus_1_L)])
R_q_plus_1_L <- t(as.matrix(gauss_red[, 1:nrow(D_q_plus_1_L)]))
R_q_plus_1_L
D_q_plus_1_L
gauss_red
R_q_plus_1_L <- t(as.matrix(gauss_red[, 1:nrow(D_q_plus_1_L)]))
R_q_plus_1_L
as.matrix(gauss_red[, 1:nrow(D_q_plus_1_L)])
D_q_plus_1_L
diag(rep(1, ncol(D_q_plus_1_L)))
t(D_q_plus_1_L)
n_q_plus_1_L
bd_opr_q_plus_1_L
D_q_plus_1_L
gauss_red
R_q_plus_1_L <- t(as.matrix(gauss_red[, 1:nrow(D_q_plus_1_L)]))
R_q_plus_1_L
as.matrix(gauss_red[, 1:nrow(D_q_plus_1_L)])
gauss_red[, 1:nrow(D_q_plus_1_L)]
gauss_red
gauss_red[, 1:nrow(D_q_plus_1_L)]
gauss_red[1:nrow(gauss_red), 1:nrow(D_q_plus_1_L)]
gauss_red
gauss_red <- matlib::gaussianElimination(t(D_q_plus_1_L), diag(rep(1, ncol(D_q_plus_1_L))))
gauss_red
gauss_red
gauss_red[, 1:3]
gauss_red[1, 1:3]
gauss_red[1, 1:3, drop=FALSE]
gauss_red[, 1:nrow(D_q_plus_1_L), drop=FALSE]
R_q_plus_1_L <- t(gauss_red[, 1:nrow(D_q_plus_1_L), drop=FALSE])
R_q_plus_1_L
gauss_red[, (nrow(D_q_plus_1_L) + 1):ncol(gauss_red), drop=FALSE]
Y_mat <- t(gauss_red[, (nrow(D_q_plus_1_L) + 1):ncol(gauss_red), drop=FALSE])
Y_mat
zero_idx <- which(colSums(abs(R_q_plus_1_L) > 1e-10) == 0)
zero_idx
identical(zero_idx, integer(0))
Y_mat[, zero_idx]
Z_mat <- Y_mat[, zero_idx, drop=FALSE]
Y_mat
(bd_opr_q_plus_1_L %*% Y_mat)
bd_opr_q_plus_1_L_K <- (bd_opr_q_plus_1_L %*% Y_mat)[1:n_q_K, zero_idx, drop=FALSE]
bd_opr_q_plus_1_L_K
lap_q_up_K_L <- bd_opr_q_plus_1_L_K %*% inv((t(Z_mat) %*% diag(1 / W_q_plus_1_L) %*% Z_mat)) %*% t(bd_opr_q_plus_1_L_K) %*% diag(1 / W_q_K)
bd_opr_q_plus_1_L_K
(t(Z_mat) %*% diag(1 / W_q_plus_1_L) %*% Z_mat)
t(Z_mat)
diag(1 / W_q_plus_1_L)
W_q_plus_1_L
W_q_plus_1_L
n_q_plus_1_L
n_q_plus_1_L
Z_mat
n_q_plus_1_L
n_q_plus_1_L
if(n_q_plus_1_L !=0){rep(1, n_q_plus_1_L)}
if(n_q_plus_1_L !=0){rep(1, n_q_plus_1_L)}else{1}
W_q_plus_1_L <- if(n_q_plus_1_L !=0){rep(1, n_q_plus_1_L)}else{1}
W_q_plus_1_L
(t(Z_mat) %*% diag(1 / W_q_plus_1_L) %*% Z_mat)
lap_q_up_K_L <- bd_opr_q_plus_1_L_K %*% inv((t(Z_mat) %*% diag(1 / W_q_plus_1_L) %*% Z_mat)) %*% t(bd_opr_q_plus_1_L_K) %*% diag(1 / W_q_K)
inv((t(Z_mat) %*% diag(1 / W_q_plus_1_L) %*% Z_mat))
(t(Z_mat) %*% diag(1 / W_q_plus_1_L) %*% Z_mat)
inv
inv((t(Z_mat) %*% diag(1 / W_q_plus_1_L) %*% Z_mat))
t(Z_mat) %*% diag(1 / W_q_plus_1_L) %*% Z_mat
matrix(1)
inv(matrix(1))
?inv
solve(matrix(1))
?solve
lap_q_up_K_L <- bd_opr_q_plus_1_L_K %*% solve(t(Z_mat) %*% diag(1 / W_q_plus_1_L) %*% Z_mat) %*% t(bd_opr_q_plus_1_L_K) %*% diag(1 / W_q_K)
lap_q_up_K_L
lap <- lap_q_up_K_L + lap_q_down_K
pers_lap <- function(cmplx_K, cmplx_L, order = 1, W_q_minus_1_K=NULL, W_q_K=NULL, W_q_plus_1_L=NULL){
# order is the order of simplices
bd_opr_q_K <- cmplx_K |>
boundary_opr(order = order)
bd_opr_q_plus_1_L <- cmplx_L |>
boundary_opr(order = order + 1)
n_q_L <- length(cmplx_L[sapply(cmplx_L, length) == order + 1])
n_q_K <- length(cmplx_K[sapply(cmplx_K, length) == order + 1])
n_q_minus_1_K <- length(cmplx_K[sapply(cmplx_K, length) == order])
n_q_plus_1_L <- length(cmplx_L[sapply(cmplx_L, length) == order + 2])
if(is.null(W_q_minus_1_K)){
W_q_minus_1_K <- rep(1, n_q_minus_1_K)
}
W_q_minus_1_K_mat <- diag(W_q_minus_1_K)
if(is.null(W_q_K)){
W_q_K <- rep(1, n_q_K)
}
W_q_K_mat <- diag(W_q_K)
if(is.null(W_q_plus_1_L)){
W_q_plus_1_L <- if(n_q_plus_1_L !=0){rep(1, n_q_plus_1_L)}else{1}
}
W_q_plus_1_L_mat <- diag(W_q_plus_1_L)
if(order == 0){
lap_q_down_K <- 0
}
# else if(all(bd_opr_q_plus_1_L == 0)){
#  lap <- W_q_K_mat %*% t(bd_opr_q_K) %*% diag(1 / W_q_minus_1_K) %*% bd_opr_q_K
#}
else{
lap_q_down_K <- W_q_K_mat %*% t(bd_opr_q_K) %*% diag(1 / W_q_minus_1_K) %*% bd_opr_q_K
}
if(n_q_L == n_q_K){
lap_q_up_L <- bd_opr_q_plus_1_L %*% W_q_plus_1_L_mat %*% t(bd_opr_q_plus_1_L) %*% diag(1 / W_q_K)
lap <- lap_q_down_K + lap_q_up_L
# return(lap_q_down_K + lap_q_up_L)
} else{
D_q_plus_1_L <- as.matrix(bd_opr_q_plus_1_L[seq(from=n_q_K + 1, to =n_q_L), ])
gauss_red <- matlib::gaussianElimination(t(D_q_plus_1_L), diag(rep(1, ncol(D_q_plus_1_L))))
R_q_plus_1_L <- t(gauss_red[, 1:nrow(D_q_plus_1_L), drop=FALSE])
Y_mat <- t(gauss_red[, (nrow(D_q_plus_1_L) + 1):ncol(gauss_red), drop=FALSE])
zero_idx <- which(colSums(abs(R_q_plus_1_L) > 1e-10) == 0)
if (identical(zero_idx, integer(0))){
lap <- lap_q_down_K
} else{
Z_mat <- Y_mat[, zero_idx, drop=FALSE]
bd_opr_q_plus_1_L_K <- (bd_opr_q_plus_1_L %*% Y_mat)[1:n_q_K, zero_idx, drop=FALSE]
lap_q_up_K_L <- bd_opr_q_plus_1_L_K %*% solve(t(Z_mat) %*% diag(1 / W_q_plus_1_L) %*% Z_mat) %*% t(bd_opr_q_plus_1_L_K) %*% diag(1 / W_q_K)
lap <- lap_q_up_K_L + lap_q_down_K
}
}
return(lap)
}
lap_tst <- pers_lap(cmplx_K = cmplx_K, cmplx_L = cmplx_L, order = 2)
dim(lap_tst)
lap_tst
lap_tst <- pers_lap(cmplx_K = cmplx_K, cmplx_L = cmplx_L, order = 3)
lap_tst <- pers_lap(cmplx_K = cmplx_K, cmplx_L = cmplx_L, order = 2)
dim(lap_tst)
lap_tst
lap_tst <- pers_lap(cmplx_K = cmplx_K, cmplx_L = cmplx_L, order = 1)
dim(lap_tst)
lap_tst
lap_tst <- pers_lap(cmplx_K = cmplx_K, cmplx_L = cmplx_L, order = 2)
dim(lap_tst)
lap_tst
order = 2
lap_tst
lap_q_down_K
lap_q_down_K
pers_lap <- function(cmplx_K, cmplx_L, order = 1, W_q_minus_1_K=NULL, W_q_K=NULL, W_q_plus_1_L=NULL){
# order is the order of simplices
bd_opr_q_K <- cmplx_K |>
boundary_opr(order = order)
bd_opr_q_plus_1_L <- cmplx_L |>
boundary_opr(order = order + 1)
n_q_L <- length(cmplx_L[sapply(cmplx_L, length) == order + 1])
n_q_K <- length(cmplx_K[sapply(cmplx_K, length) == order + 1])
n_q_minus_1_K <- length(cmplx_K[sapply(cmplx_K, length) == order])
n_q_plus_1_L <- length(cmplx_L[sapply(cmplx_L, length) == order + 2])
if(is.null(W_q_minus_1_K)){
W_q_minus_1_K <- if(n_q_minus_1_K != 0){rep(1, n_q_minus_1_K)} else{1}
}
W_q_minus_1_K_mat <- diag(W_q_minus_1_K)
if(is.null(W_q_K)){
W_q_K <- if(n_q_K != 0){rep(1, n_q_K)} else{1}
}
W_q_K_mat <- diag(W_q_K)
if(is.null(W_q_plus_1_L)){
W_q_plus_1_L <- if(n_q_plus_1_L !=0){rep(1, n_q_plus_1_L)}else{1}
}
W_q_plus_1_L_mat <- diag(W_q_plus_1_L)
if(order == 0){
lap_q_down_K <- 0
}
# else if(all(bd_opr_q_plus_1_L == 0)){
#  lap <- W_q_K_mat %*% t(bd_opr_q_K) %*% diag(1 / W_q_minus_1_K) %*% bd_opr_q_K
#}
else{
lap_q_down_K <- W_q_K_mat %*% t(bd_opr_q_K) %*% diag(1 / W_q_minus_1_K) %*% bd_opr_q_K
}
if(n_q_L == n_q_K){
lap_q_up_L <- bd_opr_q_plus_1_L %*% W_q_plus_1_L_mat %*% t(bd_opr_q_plus_1_L) %*% diag(1 / W_q_K)
lap <- lap_q_down_K + lap_q_up_L
# return(lap_q_down_K + lap_q_up_L)
} else{
D_q_plus_1_L <- as.matrix(bd_opr_q_plus_1_L[seq(from=n_q_K + 1, to =n_q_L), ])
gauss_red <- matlib::gaussianElimination(t(D_q_plus_1_L), diag(rep(1, ncol(D_q_plus_1_L))))
R_q_plus_1_L <- t(gauss_red[, 1:nrow(D_q_plus_1_L), drop=FALSE])
Y_mat <- t(gauss_red[, (nrow(D_q_plus_1_L) + 1):ncol(gauss_red), drop=FALSE])
zero_idx <- which(colSums(abs(R_q_plus_1_L) > 1e-10) == 0)
if (identical(zero_idx, integer(0))){
lap <- lap_q_down_K
} else{
Z_mat <- Y_mat[, zero_idx, drop=FALSE]
bd_opr_q_plus_1_L_K <- (bd_opr_q_plus_1_L %*% Y_mat)[1:n_q_K, zero_idx, drop=FALSE]
lap_q_up_K_L <- bd_opr_q_plus_1_L_K %*% solve(t(Z_mat) %*% diag(1 / W_q_plus_1_L) %*% Z_mat) %*% t(bd_opr_q_plus_1_L_K) %*% diag(1 / W_q_K)
lap <- lap_q_up_K_L + lap_q_down_K
}
}
return(lap)
}
load_all()
boundary_opr(cmplx_K, order = 2)
lap_tst <- pers_lap(cmplx_K = cmplx_K, cmplx_L = cmplx_L, order = 2)
dim(lap_tst)
eigen(lap_tst)
lap_tst <- pers_lap(cmplx_K = cmplx_K, cmplx_L = cmplx_L, order = 2)
eigen(lap_tst)[["values"]]
lap_tst <- pers_lap(cmplx_K = cmplx_K, cmplx_L = cmplx_L, order = 1)
eigen(lap_tst)[["values"]]
lap_tst <- pers_lap(cmplx_K = cmplx_K, cmplx_L = cmplx_L, order = 1)
rev(eigen(lap_tst)[["values"]])
lap_tst <- pers_lap(cmplx_K = FltRips$cmplx[FltRips$values < 0.1],
cmplx_L = FltRips$cmplx[FltRips$values < 0.2],
order = 1)
rev(eigen(lap_tst)[["values"]])
lap_tst <- pers_lap(cmplx_K = FltRips$cmplx[FltRips$values < 0.1],
cmplx_L = FltRips$cmplx[FltRips$values < 0.25],
order = 1)
rev(eigen(lap_tst)[["values"]])
lap_tst <- pers_lap(cmplx_K = FltRips$cmplx[FltRips$values < 0.1],
cmplx_L = FltRips$cmplx[FltRips$values < 0.4],
order = 1)
rev(eigen(lap_tst)[["values"]])
pts
plot(pts$V1, pts$V2)
FltRips
FltRips <- TDA::ripsFiltration(X = pts[, 1:2], maxdimension = 1,
maxscale = 1, dist = "euclidean", library = "GUDHI",
printProgress = TRUE)
lap_tst <- pers_lap(cmplx_K = FltRips$cmplx[FltRips$values < 0.1],
cmplx_L = FltRips$cmplx[FltRips$values < 0.2],
order = 1)
rev(eigen(lap_tst)[["values"]])
lap_tst <- pers_lap(cmplx_K = FltRips$cmplx[FltRips$values < 0.01],
cmplx_L = FltRips$cmplx[FltRips$values < 0.1],
order = 1)
rev(eigen(lap_tst)[["values"]])
lap_tst
FltRips$values
ripsdiag <- TDA::ripsDiag(X = pts[, 1:2], maxdimension = 1,
maxscale = 1, dist = "euclidean", library = "GUDHI",
printProgress = TRUE)
plot(ripsdiag)
plot(ripsdiag$diagram)
lap_tst <- pers_lap(cmplx_K = FltRips$cmplx[FltRips$values < 0.5],
cmplx_L = FltRips$cmplx[FltRips$values < 0.8],
order = 1)
rev(eigen(lap_tst)[["values"]])
lap_tst <- pers_lap(cmplx_K = FltRips$cmplx[FltRips$values < 0.5],
cmplx_L = FltRips$cmplx[FltRips$values < 0.8],
order = 0)
rev(eigen(lap_tst)[["values"]])
lap_tst <- pers_lap(cmplx_K = FltRips$cmplx[FltRips$values < 0.5],
cmplx_L = FltRips$cmplx[FltRips$values < 0.8],
order = 1)
rev(eigen(lap_tst)[["values"]])
lap_tst <- pers_lap(cmplx_K = FltRips$cmplx[FltRips$values < 0.5],
cmplx_L = FltRips$cmplx[FltRips$values < 0.9],
order = 1)
rev(eigen(lap_tst)[["values"]])
lap_tst <- pers_lap(cmplx_K = FltRips$cmplx[FltRips$values < 0.6],
cmplx_L = FltRips$cmplx[FltRips$values < 0.9],
order = 1)
rev(eigen(lap_tst)[["values"]])
ripsdiag$diagram
lap_tst <- pers_lap(cmplx_K = FltRips$cmplx[FltRips$values < 0.69],
cmplx_L = FltRips$cmplx[FltRips$values < 0.7],
order = 1)
rev(eigen(lap_tst)[["values"]])
lap_tst <- pers_lap(cmplx_K = FltRips$cmplx[FltRips$values < 0.7],
cmplx_L = FltRips$cmplx[FltRips$values < 0.7],
order = 1)
rev(eigen(lap_tst)[["values"]])
lap_tst <- pers_lap(cmplx_K = FltRips$cmplx[FltRips$values < 0.7],
cmplx_L = FltRips$cmplx[FltRips$values < 0.75],
order = 1)
rev(eigen(lap_tst)[["values"]])
lap_tst <- pers_lap(cmplx_K = FltRips$cmplx[FltRips$values < 0.7],
cmplx_L = FltRips$cmplx[FltRips$values < 0.75],
order = 0)
rev(eigen(lap_tst)[["values"]])
lap_tst <- pers_lap(cmplx_K = FltRips$cmplx[FltRips$values < 0.1],
cmplx_L = FltRips$cmplx[FltRips$values < 0.75],
order = 0)
rev(eigen(lap_tst)[["values"]])
lap_tst <- pers_lap(cmplx_K = FltRips$cmplx[FltRips$values < 0.1],
cmplx_L = FltRips$cmplx[FltRips$values < 0.2],
order = 0)
rev(eigen(lap_tst)[["values"]])
lap_tst <- pers_lap(cmplx_K = FltRips$cmplx[FltRips$values < 0.7],
cmplx_L = FltRips$cmplx[FltRips$values < 0.9],
order = 1)
rev(eigen(lap_tst)[["values"]])
lap_tst <- pers_lap(cmplx_K = FltRips$cmplx[FltRips$values < 0.7],
cmplx_L = FltRips$cmplx[FltRips$values < 1],
order = 1)
rev(eigen(lap_tst)[["values"]])
lap_tst <- pers_lap(cmplx_K = FltRips$cmplx[FltRips$values < 0.5],
cmplx_L = FltRips$cmplx[FltRips$values < 1],
order = 1)
rev(eigen(lap_tst)[["values"]])
lap_tst <- pers_lap(cmplx_K = FltRips$cmplx[FltRips$values < 0.9],
cmplx_L = FltRips$cmplx[FltRips$values < 1],
order = 1)
rev(eigen(lap_tst)[["values"]])
lap_tst <- pers_lap(cmplx_K = FltRips$cmplx[FltRips$values < 1],
cmplx_L = FltRips$cmplx[FltRips$values < 1],
order = 1)
rev(eigen(lap_tst)[["values"]])
FltRips <- TDA::ripsFiltration(X = pts[, 1:2], maxdimension = 1,
maxscale = 2, dist = "euclidean", library = "GUDHI",
printProgress = TRUE)
cmplx_K <- FltRips$cmplx[FltRips$values < 0.1]
cmplx_L <- FltRips$cmplx[FltRips$values < 0.2]
ripsdiag <- TDA::ripsDiag(X = pts[, 1:2], maxdimension = 1,
maxscale = 2, dist = "euclidean", library = "GUDHI",
printProgress = TRUE)
plot(ripsdiag$diagram)
lap_tst <- pers_lap(cmplx_K = FltRips$cmplx[FltRips$values < 1],
cmplx_L = FltRips$cmplx[FltRips$values < 1.9],
order = 1)
Sys.setenv('R_MAX_VSIZE'=32000000000)
lap_tst <- pers_lap(cmplx_K = FltRips$cmplx[FltRips$values < 1],
cmplx_L = FltRips$cmplx[FltRips$values < 1.9],
order = 1)
lap_tst <- pers_lap(cmplx_K = FltRips$cmplx[FltRips$values < 1.5],
cmplx_L = FltRips$cmplx[FltRips$values < 1.9],
order = 1)
FltRips$cmplx[FltRips$values < 1.5]
lap_tst <- pers_lap(cmplx_K = FltRips$cmplx[FltRips$values < 1.5],
cmplx_L = FltRips$cmplx[FltRips$values < 1.6],
order = 1)
rev(eigen(lap_tst)[["values"]])
lap_tst <- pers_lap(cmplx_K = FltRips$cmplx[FltRips$values < 1.6],
cmplx_L = FltRips$cmplx[FltRips$values < 1.6],
order = 1)
rev(eigen(lap_tst)[["values"]])
lap_tst <- pers_lap(cmplx_K = FltRips$cmplx[FltRips$values < 1.7],
cmplx_L = FltRips$cmplx[FltRips$values < 1.7],
order = 1)
rev(eigen(lap_tst)[["values"]])
lap_tst <- pers_lap(cmplx_K = FltRips$cmplx[FltRips$values < 1.9],
cmplx_L = FltRips$cmplx[FltRips$values < 1.9],
order = 1)
rev(eigen(lap_tst)[["values"]])
ripsdiag$diagram
lap_tst <- pers_lap(cmplx_K = FltRips$cmplx[FltRips$values < 1.7],
cmplx_L = FltRips$cmplx[FltRips$values < 1.9],
order = 1)
lap_tst <- pers_lap(cmplx_K = FltRips$cmplx[FltRips$values < 1.7],
cmplx_L = FltRips$cmplx[FltRips$values < 1.8],
order = 1)
gc()
pts <- read.delim(file = "Point.txt", sep = " ", header = F)
pts
?read.delim
pts <- utils::read.delim(file = "Point.txt", sep = " ", header = F)
pts <- utils::read.delim(file = "Point.txt", sep = " ", header = F)
pts <- utils::read.delim(file = "/Users/ruidong/Desktop/my_spectrum/spectrum/Point.txt", sep = " ", header = F)
FltRips <- TDA::ripsFiltration(X = pts[, 1:2], maxdimension = 1,
maxscale = 2, dist = "euclidean", library = "GUDHI",
printProgress = TRUE)
library(devtools)
load_all()
lap_tst <- pers_lap(cmplx_K = FltRips$cmplx[FltRips$values < 1.7],
cmplx_L = FltRips$cmplx[FltRips$values < 1.8],
order = 1)
lap_tst <- pers_lap(cmplx_K = FltRips$cmplx[FltRips$values < 1.73],
cmplx_L = FltRips$cmplx[FltRips$values < 1.75],
order = 1)
rev(eigen(lap_tst)[["values"]])
lap_tst <- pers_lap(cmplx_K = FltRips$cmplx[FltRips$values < 1.73],
cmplx_L = FltRips$cmplx[FltRips$values < 1.74],
order = 1)
rev(eigen(lap_tst)[["values"]])
lap_tst <- pers_lap(cmplx_K = FltRips$cmplx[FltRips$values < 1.73],
cmplx_L = FltRips$cmplx[FltRips$values < 1.74],
order = 1)
rev(eigen(lap_tst)[["values"]])
